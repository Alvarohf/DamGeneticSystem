#pragma checksum "D:\github\DamGeneticSystem\GeneticDams\GeneticDams\Views\Home\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "04c5b35646834fd8ce40b1bbf119f73134188105"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Index), @"mvc.1.0.view", @"/Views/Home/Index.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Home/Index.cshtml", typeof(AspNetCore.Views_Home_Index))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "D:\github\DamGeneticSystem\GeneticDams\GeneticDams\Views\_ViewImports.cshtml"
using GeneticDams;

#line default
#line hidden
#line 2 "D:\github\DamGeneticSystem\GeneticDams\GeneticDams\Views\_ViewImports.cshtml"
using GeneticDams.Models;

#line default
#line hidden
#line 1 "D:\github\DamGeneticSystem\GeneticDams\GeneticDams\Views\Home\Index.cshtml"
using Microsoft.AspNetCore.Identity;

#line default
#line hidden
#line 2 "D:\github\DamGeneticSystem\GeneticDams\GeneticDams\Views\Home\Index.cshtml"
using GeneticDams.BLL;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"04c5b35646834fd8ce40b1bbf119f73134188105", @"/Views/Home/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"f5f14f39e0ee9d323cecdcafbbffff8576e7383c", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/signalr/dist/browser/signalr.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(63, 2, true);
            WriteLiteral("\r\n");
            EndContext();
            BeginContext(163, 2, true);
            WriteLiteral("\r\n");
            EndContext();
#line 7 "D:\github\DamGeneticSystem\GeneticDams\GeneticDams\Views\Home\Index.cshtml"
  
    ViewData["Title"] = "Genetic Dam System";

#line default
#line hidden
            BeginContext(219, 624, true);
            WriteLiteral(@"
<div class=""text-center"">
    <h1 class=""display-4"">Genetic Dam System <i class=""fas fa-dna""></i></h1>
    <p>This project finds the best spot in a topographic map to put a dam with genetic algorithms</p>
</div>
<input type=""button"" class=""btn btn-primary mb-3"" value=""Click to Display Map"" onclick=""startMap('maps/map.json','map_1')"" />
<div id=""myDiv"" style=""width:100%;height:400px;""></div>
<p id=""info-box""></p>
<div class=""container"">
    <div class=""row"">
        <input type=""button"" id=""sendButton"" class=""btn btn-success mb-3"" value=""Start Algorithm"" />
        <p id=""result""></p>
    </div>
</div>
");
            EndContext();
#line 24 "D:\github\DamGeneticSystem\GeneticDams\GeneticDams\Views\Home\Index.cshtml"
  
    //ConcreteAggregate a = new ConcreteAggregate();
    MapAggregate maps = new MapAggregate();
    maps[0] = new Map(true, 1, 100, "maps/map.json");
    maps[1] = new Map(true, 1, 100, "maps/map10m.json");
    maps[2] = new Map(true, 1, 100, "maps/map25m.json");
    maps[3] = new Map(true, 1, 100, "maps/map25m2.json");
    Iterator mapIterator = maps.CreateIterator();
    int i = 2;

#line default
#line hidden
            BeginContext(1243, 103, true);
            WriteLiteral("    <nav>\r\n        <ul class=\"pagination\"  id=\"mapNav\">\r\n            <li id=\"map_1\"class=\"page-item\"><a");
            EndContext();
            BeginWriteAttribute("id", " id=\"", 1346, "\"", 1381, 1);
#line 35 "D:\github\DamGeneticSystem\GeneticDams\GeneticDams\Views\Home\Index.cshtml"
WriteAttributeValue("", 1351, mapIterator.First().MapString, 1351, 30, false);

#line default
#line hidden
            EndWriteAttribute();
            BeginContext(1382, 80, true);
            WriteLiteral(" href=\"#\" class=\"page-link\" onclick=\"startMap(this.id,\'map_1\')\">map_1</a></li>\r\n");
            EndContext();
#line 36 "D:\github\DamGeneticSystem\GeneticDams\GeneticDams\Views\Home\Index.cshtml"
             while (maps.Count +1> i)
            {

#line default
#line hidden
            BeginContext(1516, 15, true);
            WriteLiteral("            <li");
            EndContext();
            BeginWriteAttribute("id", " id=\"", 1531, "\"", 1542, 2);
            WriteAttributeValue("", 1536, "map_", 1536, 4, true);
#line 38 "D:\github\DamGeneticSystem\GeneticDams\GeneticDams\Views\Home\Index.cshtml"
WriteAttributeValue("", 1540, i, 1540, 2, false);

#line default
#line hidden
            EndWriteAttribute();
            BeginContext(1543, 21, true);
            WriteLiteral(" class=\"page-item\"><a");
            EndContext();
            BeginWriteAttribute("id", "  id=\"", 1564, "\"", 1599, 1);
#line 38 "D:\github\DamGeneticSystem\GeneticDams\GeneticDams\Views\Home\Index.cshtml"
WriteAttributeValue("", 1570, mapIterator.Next().MapString, 1570, 29, false);

#line default
#line hidden
            EndWriteAttribute();
            BeginContext(1600, 28, true);
            WriteLiteral(" href=\"#\"  class=\"page-link\"");
            EndContext();
            BeginWriteAttribute("onclick", " onclick=\"", 1628, "\"", 1664, 3);
            WriteAttributeValue("", 1638, "startMap(this.id,\'map_", 1638, 22, true);
#line 38 "D:\github\DamGeneticSystem\GeneticDams\GeneticDams\Views\Home\Index.cshtml"
WriteAttributeValue("", 1660, i, 1660, 2, false);

#line default
#line hidden
            WriteAttributeValue("", 1662, "\')", 1662, 2, true);
            EndWriteAttribute();
            BeginContext(1665, 5, true);
            WriteLiteral(">map_");
            EndContext();
            BeginContext(1671, 1, false);
#line 38 "D:\github\DamGeneticSystem\GeneticDams\GeneticDams\Views\Home\Index.cshtml"
                                                                                                                                                     Write(i);

#line default
#line hidden
            EndContext();
            BeginContext(1672, 11, true);
            WriteLiteral("</a></li>\r\n");
            EndContext();
#line 39 "D:\github\DamGeneticSystem\GeneticDams\GeneticDams\Views\Home\Index.cshtml"
            i++;
            }

#line default
#line hidden
            BeginContext(1716, 27, true);
            WriteLiteral("        </ul>\r\n    </nav>\r\n");
            EndContext();
            BeginContext(1750, 2, true);
            WriteLiteral("\r\n");
            EndContext();
            DefineSection("Scripts", async() => {
                BeginContext(1778, 14, true);
                WriteLiteral("\r\n            ");
                EndContext();
                BeginContext(1792, 61, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "04c5b35646834fd8ce40b1bbf119f731341881058886", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(1853, 7407, true);
                WriteLiteral(@"
            <script>
        var MapBounds;
                var map;
                function startMap(name, li_id) {
                    // We remove active button
                                        var elements = document.getElementById(""mapNav"").getElementsByTagName(""li"");
                    for (var i = 0; i < elements.length; i++) {
                        console.log(elements[i])
                         elements[i].classList.remove(""active"");
                    }
                    // We add new active button
                    var element = document.getElementById(li_id);
                    element.classList.toggle(""active"");
                    displayGoogleMap(name);
                }
        function displayGoogleMap(name) {
            // Init map
            map = new google.maps.Map(document.getElementById('myDiv'), {
                zoom: 6,
                center: { lat: 40.687, lng: -1.996 }
            });
            // Set initial bounds
            bounds");
                WriteLiteral(@" = new google.maps.LatLngBounds();
            // Load icons of the markers
            var icons = {
                dam: {
                    icon: ""/res/dam_red.png""
                },
                good: {
                    icon: ""/res/good-spot.png""
                }
            };


            // Load GeoJSON
            mapJson(map,name)
            // Custom the map colors
            map.data.setStyle(function (feature) {
                var color = feature.getProperty('stroke');
                return {
                    clickable: true,
                    fillColor: color,
                    strokeWeight: 1
                }
            });

            // Point of the marker
            var point = {
                position: new google.maps.LatLng(40.687, -1.996),
                type: 'dam'
            };
            // Display the marker
            marker = placeMarker(point.position, icons, point.type);


            // Center map in the middle
    ");
                WriteLiteral(@"        map.data.addListener('addfeature', function (e) {
                processPoints(e.feature.getGeometry(), bounds.extend, bounds);
                MapBounds = bounds;
                console.log(bounds)
                map.setCenter(bounds.getCenter());
                map.fitBounds(bounds);
                changeMarkerPosition(marker, map.center);
            });
            map.fitBounds(bounds);
            map.panToBounds(bounds);

            // Get data from the layers
            map.data.addListener('mouseover', function (event) {
                document.getElementById('info-box').textContent =
                    event.feature.getProperty('elevation')+event.latLng;
            });

            // Change marker position
            map.data.addListener('click', function (event) {
                changeMarkerPosition(marker, event.latLng);
                floodMap(map,event.feature.getProperty('elevation'));
            });

        }

        // Reset map colours
     ");
                WriteLiteral(@"   function restartMap(map) {
            map.data.setStyle(function (feature) {
                var color = feature.getProperty('stroke');
                return {
                    clickable: true,
                    fillColor: color,
                    strokeWeight: 1
                }
            });
        }
        // Add water layer
        function floodMap(map, elevation) {
            restartMap(map);
            map.data.setStyle(function (feature) {
                var color = feature.getProperty('stroke');
                var polygon = feature.getGeometry();
                var area = google.maps.geometry.spherical.computeArea(polygon);
                console.log(area);
                if (feature.getProperty(""elevation"") <= parseInt(elevation)) {
                    color = ""#08006C"";
                }
                return {
                    clickable: true,
                    fillColor: color,
                    strokeWeight: 1
                }
          ");
                WriteLiteral(@"  });
        }
        // Process the points to center the map
            function processPoints(geometry, callback, thisArg) {
            if (geometry instanceof google.maps.LatLng) {
                callback.call(thisArg, geometry);
            } else if (geometry instanceof google.maps.Data.Point) {
                callback.call(thisArg, geometry.get());
            } else {
                geometry.getArray().forEach(function (g) {
                    processPoints(g, callback, thisArg);
                });
            }
        }
        // Load GeoJson Map and calculate area
        function mapJson(map,name) {
              map.data.loadGeoJson(
            name, {},
            function(features) {
              map.data.forEach(function(feature) {
                if (feature.getGeometry().getType() == ""Polygon"") {
                  var bounds = [];
                  var polyBnds = new google.maps.LatLngBounds();

                  feature.getGeometry().forEachLatLng(functio");
                WriteLiteral(@"n(path) {
                    bounds.push(path);
                    polyBnds.extend(path);
                  });
                  var area = google.maps.geometry.spherical.computeArea(bounds);
                    console.log(""area:""+area);

                  var iW = new google.maps.InfoWindow({
                    content: Math.round(area,2) + "" sq meters"",
                    position: polyBnds.getCenter()
                  });
                  iW.open(map);
                }
              });

    });
        }
        // Set a marker in the map
        function placeMarker(location, icons, typeIcon) {
            return new google.maps.Marker({
                position: location,
                icon: icons[typeIcon].icon,
                map: map
            });
        }
        // Update marker in the map
        function changeMarkerPosition(marker, location) {
            marker.setPosition(location);
        }

        // Connect to signalR to share data
        var");
                WriteLiteral(@" connection = new signalR.HubConnectionBuilder().withUrl(""/chatHub"").build();

        //Disable send button until connection is established
        document.getElementById(""sendButton"").disabled = true;

        // Receive data from the server
        connection.on(""ReceiveMessage"", function (typeMessage, message) {
            var msg = message.replace(/&/g, ""&amp;"").replace(/</g, ""&lt;"").replace(/>/g, ""&gt;"");
            document.getElementById(""result"").textContent = message;
            console.log(msg)

        });

        // Start connection on click
        connection.start().then(function () {
            document.getElementById(""sendButton"").disabled = false;
        }).catch(function (err) {
            return console.error(err.toString());
        });


        // Send data to the server
        document.getElementById(""sendButton"").addEventListener(""click"", function (event) {
            var typeMessage = ""init"";
            var message = MapBounds.toString();
         ");
                WriteLiteral("   connection.invoke(\"SendMessage\", typeMessage, message).catch(function (err) {\r\n                return console.error(err.toString());\r\n            });\r\n            event.preventDefault();\r\n        });\r\n\r\n            </script>\r\n\r\n        ");
                EndContext();
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public UserManager<IdentityUser> UserManager { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public SignInManager<IdentityUser> SignInManager { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
