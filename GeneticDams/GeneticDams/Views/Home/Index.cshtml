@using Microsoft.AspNetCore.Identity
@using GeneticDams.BLL;

@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager

@{
    ViewData["Title"] = "Genetic Dam System";
    //ConcreteAggregate a = new ConcreteAggregate();
    MapAggregate maps = new MapAggregate();
    SingleFactoryMap factory = SingleFactoryMap.GetInstance();
    factory.GetMap(1, "maps/map.json").geometryType();

    maps[0] = factory.GetMap(0, "maps/map.json");
    maps[1] = factory.GetMap(1, "maps/map10m.json");
    maps[2] = factory.GetMap(1, "maps/map25m.json");
    maps[3] = factory.GetMap(1, "maps/map25m2.json");
    MapIterator mapIterator = maps.CreateIterator();
    int j = 2;
    int i = 2;
}

<div class="text-center">
    <h1 class="display-4">Genetic Dam System <i class="fas fa-dna"></i></h1>
    <p>This project finds the best spot in a topographic map to put a dam with genetic algorithms</p>
</div>
<div class="row">
    <div class="col-10">
        <div id="myDiv" style="width:100%;height:400px;"></div>
    </div>
    <div class="form-group col-2">
        <div>
            @{
                        <div id="dataMap_1" class="d-none">
                            <p><b>Map data <i class="fas fa-layer-group mt-3"></i></b></p>
                            <p>@mapIterator.First().getInformation()</p>
                            <p><b>Min height:</b> @mapIterator.First().MinHeight()<i class="fas fa-long-arrow-alt-down text-danger ml-2"></i></p>
                            <p><b>Max height:</b> @mapIterator.First().MaxHeight()<i class="fas fa-long-arrow-alt-up text-success ml-2"></i></p>
                        </div>
                @while (maps.Count +1> j)
                {
                    <div id="dataMap_@j" class="d-none">
                        <p><b>Map data <i class="fas fa-layer-group mt-3"></i></b></p>
                        <p>@mapIterator.Next().getInformation()</p>
                        <p><b>Min height:</b> @mapIterator.CurrentItem.MinHeight()<i class="fas fa-long-arrow-alt-down text-danger ml-2"></i></p>
                        <p><b>Max height:</b> @mapIterator.CurrentItem.MaxHeight()<i class="fas fa-long-arrow-alt-up text-success ml-2"></i></p>
                    </div>
                    j++;
                }
            }
        </div>
    </div>

</div>

<p id="info-box"></p>
@{
    <nav>
        <div class="row">
            <input type="button" class="btn btn-primary mb-3 mr-3" value="Click to display map" onclick="startMap('maps/map.json','1')" />
            <ul class="pagination col-md-8" id="mapNav">
                <li id="map_1" class="page-item"><a id="@mapIterator.First().MapString" href="#" class="page-link" onclick="startMap(this.id,'1')">map_1</a></li>
                @while (maps.Count + 1 > i)
                {
                    <li id="map_@i" class="page-item"><a id="@mapIterator.Next().MapString" href="#" class="page-link" onclick="startMap(this.id,'@i')">map_@i</a></li>
                    i++;
                }
            </ul>
            <button class="btn btn-success h-50 d-inline" onclick="location.href='@Url.Action("Download", "Home")?fileName=' + getFile()+ '&login=' + '@SignInManager.IsSignedIn(User)' " download> Download <i class="fas fa-download"></i></button>
        </div>

    </nav>
}
@if (ViewData["Error"] != null)
{
    <div id="alert" class="alert alert-danger" role="alert">
        Error downloading your map, because you are not logged in or you have not displayed a map. <i class="fas fa-exclamation-triangle"></i>
        <button type="button" class="close" data-dismiss="alert" onclick="location.href='@Url.Action("Index", "Home")'">&times;</button>
    </div>
    { ViewData["Error"] = null; }
}
<div class="container">
    <div class="row">
        <div class="row col-7">
            <input type="button" id="sendButton" class="btn btn-success mb-3 mr-4  col-4" value="Start Algorithm" />
            <select class="form-control col-3 ml-" id="algorithmSelector">
                <option>Hills</option>
                <option>Valleys</option>
            </select>
            <select class="form-control col-3 ml-4" id="strategySelector">
                <option>Elite</option>
                <option>Roulette</option>
            </select>
        </div>
        <fieldset class="col-5">
            <div class="form-group ml-3">
                <input type="text" id="result" class="form-control" placeholder="Result">
            </div>
        </fieldset>
    </div>
</div>
@section Scripts {
    <script src="~/lib/signalr/dist/browser/signalr.js"></script>
    <script>
        function getFile() {
            fileName = null;
            var elements = document.getElementById("mapNav").getElementsByTagName("li");
            for (var i = 0; i < elements.length; i++) {
                console.log(elements[i])
                if (elements[i].classList.contains("active")) {
                    fileName = elements[i].firstChild.id;
                    console.log(fileName);
                }
            }

            return fileName;
        }
        var MapBounds;
        var map;
        var mainMarker;
        var markers;
        var allIcons;
        function startMap(name, li_id) {
            // We remove active button
            var elements = document.getElementById("mapNav").getElementsByTagName("li");
            for (var i = 0; i < elements.length; i++) {
                elements[i].classList.remove("active");
            }
            //We hide all the data
            var datas = document.querySelectorAll('[id^="dataMap"]');
            for (var i = 0; i < elements.length; i++) {
                datas[i].classList.add("d-none");
            }
            // We add new active button
            var element = document.getElementById("map_"+li_id);
            element.classList.toggle("active");
            var element = document.getElementById("dataMap_"+li_id);
            element.classList.remove("d-none");
            displayGoogleMap(name);
        }
        function displayGoogleMap(name) {
            // Init map
            map = new google.maps.Map(document.getElementById('myDiv'), {
                zoom: 6,
                center: { lat: 40.687, lng: -1.996 }
            });
            // Set initial bounds
            bounds = new google.maps.LatLngBounds();
            // Load icons of the markers
            var icons = {
                dam: {
                    icon: "/res/dam_red.png"
                },
                good: {
                    icon: "/res/good-spot2.png"
                }
            };
            allIcons = icons;
            // Load GeoJSON
            mapJson(map, name)
            // Custom the map colors
            map.data.setStyle(function (feature) {
                var color = feature.getProperty('stroke');
                return {
                    clickable: true,
                    fillColor: color,
                    strokeWeight: 1
                }
            });

            // Point of the marker
            var point = {
                position: new google.maps.LatLng(40.687, -1.996),
                type: 'dam'
            };
            // Display the marker
            mainMarker = placeMarker(point.position, icons, point.type);


            // Center map in the middle
            map.data.addListener('addfeature', function (e) {
                processPoints(e.feature.getGeometry(), bounds.extend, bounds);
                MapBounds = bounds;
                map.setCenter(bounds.getCenter());
                map.fitBounds(bounds);
                changeMarkerPosition(mainMarker, map.center);
            });
            map.fitBounds(bounds);
            map.panToBounds(bounds);
            console.log(bounds)
            // Get data from the layers
            map.data.addListener('mouseover', function (event) {
                document.getElementById('info-box').textContent = "Elevation: " +
                    event.feature.getProperty('elevation')+ " Coords: "+ event.latLng;
            });

            // Change marker position
            map.data.addListener('click', function (event) {
                changeMarkerPosition(mainMarker, event.latLng);
                floodMap(map, event.feature.getProperty('elevation'));
            });

        }

        // Reset map colours
        function restartMap(map) {
            map.data.setStyle(function (feature) {
                var color = feature.getProperty('stroke');
                return {
                    clickable: true,
                    fillColor: color,
                    strokeWeight: 1
                }
            });
        }
        // Add water layer
        function floodMap(map, elevation) {
            restartMap(map);
            map.data.setStyle(function (feature) {
                var color = feature.getProperty('stroke');
                var polygon = feature.getGeometry();
                var area = google.maps.geometry.spherical.computeArea(polygon);
                console.log(area);
                if (feature.getProperty("elevation") <= parseInt(elevation)) {
                    color = "#08006C";
                }
                return {
                    clickable: true,
                    fillColor: color,
                    strokeWeight: 1
                }
            });
        }
        // Process the points to center the map
        function processPoints(geometry, callback, thisArg) {
            if (geometry instanceof google.maps.LatLng) {
                callback.call(thisArg, geometry);
            } else if (geometry instanceof google.maps.Data.Point) {
                callback.call(thisArg, geometry.get());
            } else {
                geometry.getArray().forEach(function (g) {
                    processPoints(g, callback, thisArg);
                });
            }
        }
        // Load GeoJson Map and calculate area
        function mapJson(map, name) {
            console.log(document.location.origin + "/" + name)
            map.data.loadGeoJson(
                document.location.origin + "/" + name, {},
                );
        }
        // Set a marker in the map
        function placeMarker(location, icons, typeIcon) {
            return new google.maps.Marker({
                position: location,
                icon: icons[typeIcon].icon,
                map: map
            });
        }
        // Update marker in the map
        function changeMarkerPosition(marker, location) {
            marker.setPosition(location);
        }

        // Connect to signalR to share data
        var connection = new signalR.HubConnectionBuilder().withUrl("/chatHub").build();

        //Disable send button until connection is established
        document.getElementById("sendButton").disabled = true;

        // Receive data from the server
        var _locations;
        var markers = [];
        connection.on("ReceiveMessage", function (locations, message) {
            _locations = locations;
            var msg = message.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
            document.getElementById("result").value = message;
            var i = 0;
            initMarkers(20);
            while (i < locations.length - 1) {

                for (var j = 1; j < locations[0].length - 1; j++) {
                    restMarkerTimeout(i, j, markers[j]);
                }
                mainMarkerTimeout(i);
                i++;

            }

        });
        function initMarkers(quantity) {
            for (var i = 0; i < quantity; i++) {
                markers[i] = placeMarker(null, allIcons, "good")
            }

        }
        function mainMarkerTimeout(i) {
            console.log("Principal" + _locations[i][0])
            setTimeout(function () { changeMarkerPosition(mainMarker, _locations[i][0]); }, i * 1000);
        }
        function restMarkerTimeout(i, j, marker) {
            console.log("Principal" + _locations[i][j])
            setTimeout(function () { changeMarkerPosition(marker, _locations[i][j]); }, i * 800);
        }
        // Start connection on click
        connection.start().then(function () {
            document.getElementById("sendButton").disabled = false;
        }).catch(function (err) {
            return console.error(err.toString());
        });


        // Send data to the server
    document.getElementById("sendButton").addEventListener("click", function (event) {

            var selection = document.getElementById("algorithmSelector");
            var typeAlgorithm = selection.options[selection.selectedIndex].value;
            var strategy = document.getElementById("strategySelector");
            var typeStrategy = selection.options[strategy.selectedIndex].value;
            console.log(MapBounds)
            if (MapBounds !== undefined) {
                document.getElementById("result").classList.remove("text-danger");
                var message = MapBounds.toString();
                connection.invoke("SendMessage",typeStrategy, typeAlgorithm, message).catch(function (err) {
                    return console.error(err.toString());
                });
            } else {
                document.getElementById("result").classList.add("text-danger");
                document.getElementById("result").value = "You need to load the map first";
            }
            event.preventDefault();
        });

    </script>

}
